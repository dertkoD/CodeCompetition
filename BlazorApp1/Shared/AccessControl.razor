@using BlazorApp1.Models
@using System.Text.Json
@using Newtonsoft.Json
@using CompetitionLibrary.Models
@inject AuthenticationStateProvider AuthState
@inject IGetUserIdAsync UserToken
@inject Token Token

@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IHttpContextAccessor HttpContextAccessor
@inject Authentication Authentication

@attribute [Authorize]
<AuthorizeView Roles="SystemAdmin, CompetitionAdmin, Customer">
    <Authorized>
        <img src="@user.UserAvatar" alt="avatar" class="rounded-circle img-fluid" style="width: 32px;"><Text>&nbsp&nbsp</Text> @user.UserFirstName @user.UserSecondName
        <a href="logout"> Log out</a>
    </Authorized>
</AuthorizeView>

<AuthorizeView Policy="NoRolePolicy">
    <Authorized >  
        <Text>&nbsp&nbsp</Text> @Username
        <a href="login?redirectUri=/">Log in</a>
    </Authorized>
</AuthorizeView>

@code {
    private string Username = "Anonymous User";
    private string Picture = "";
    private string Email = "";
    private string? token;
    private HttpClient client;
    private UserDto user = new UserDto();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        try
        {
            client = Authentication.Authenications(".NetApi");
            token = Token.GetToken();
            var userIdFromToken = await UserToken.GetUserIdAsync();
            if (userIdFromToken != null && token != null)
            {
                var request = new HttpRequestMessage(HttpMethod.Get, "api/Users/" + userIdFromToken);

                var jsonOptions = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                var response = await client.SendAsync(request);

                var responseStream = await response.Content.ReadAsStreamAsync();

                var usersTest = await System.Text.Json.JsonSerializer.DeserializeAsync
                    <dynamic>(responseStream, jsonOptions);

                user = JsonConvert.DeserializeObject<UserDto>(usersTest.ToString());
            }
            else
            {
                Username = state.User.Identity.Name ?? string.Empty;
                Picture = state.User.Claims
                    .Where(c => c.Type.Equals("picture"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
            }

        }
        catch (Exception e)
        {
            Username = state.User.Identity.Name ?? string.Empty;
            Picture = state.User.Claims
                .Where(c => c.Type.Equals("picture"))
                .Select(c => c.Value)
                .FirstOrDefault() ?? string.Empty;
        }
        await base.OnInitializedAsync();
    }
}